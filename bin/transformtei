#!/bin/sh -e
# convert between TEI and other formats. intended to be use as symlink to other scripts
# whose names will dictate the format and direction of conversion.
# Sebastian Rahtz, July 2011
# copyright: TEI Consortium
# license: GPL
# $Id$

script=`basename $0`
scriptdir=`dirname "$0"`
APPHOME=`(cd $scriptdir; cd ..; pwd)`
defaultAPPHOME=`(cd $scriptdir; cd .. ; pwd)`
profiledir=$APPHOME/profiles
defaultprofiledir=$APPHOME/profiles
oxygenlib=/usr/share/oxygen/lib
die()
{
    echo "ERROR: $@."
    D=`date "+%Y-%m-%d %H:%M:%S"`
    echo "This was a fatal error. $D"
    exit 1
}

usageMsg()
{
echo "TEI conversion: from $from to $to"
echo ""
echo "  Usage: $0 [options] inputfile [outputfile]"
echo
echo "  Options, binary switches:"
echo "  --verbose            # be verbose"
echo "  --debug              # be verbose, do not delete intermediate files"
echo "  --apphome=$APPHOME   # where to find app directory"
echo "  --profiledir=$profiledir    # where to find profile directory"
echo "  --profile=$profile    # which transformation profile to use"
echo "  --lang=$lang    # which language to use "
echo "  --oxygenlib=$oxygenlib    # where is oxygenlib"
case $format in
      teitorelaxng) ;;
      teitornc) ;;
      teitodtd) ;;
      teitoxsd) ;;
    *) 
	echo "  --odd                # perform processing of ODD (if appropriate)"
	echo "  --localsource=DIR    # where is local copy of source of TEI Guidelines"
	echo "  --summaryDoc         # only make summary, when doing ODD processing"
	echo "  --schema=NAME        # process the schemaSpec called NAME"
	;;
esac

if [ $script = "teitoepub" ]
then
echo "  --fileperpage        # create output files one per page "
echo "  --nocompress	     # disable compression of epub output file"
fi
echo 
echo "  Options, shown with defaults:"
echo "  --saxonjar=$SAXONJAR  # location of Saxon jar file"
echo "  --trangjar=$TRANGJAR  # location of trang jar file"
if [ $script = "teitoepub" ]
then
echo "  --mediaoverlay       # create media overlays from timeline data "
echo "  --coverimage=        # name of JPEG file for ebook cover"
echo "  --css=               # supply name of CSS file "
echo "  --publisher=         # name of publisher for ebook "
echo "  --splitLevel=$splitLevel        # splitting level "
echo "  --subject=           # subject/category for ebook "
echo "  --uid=               # unique URN for ebook "
echo "  --viewportwidth=     # viewport width for epub fixed-size pages "
echo "  --viewportheight=    # viewport height for epub fixed-size pages "
fi
echo
echo "Stylesheet family version: $version"
}

#-------------------------------------------------
fileperpage=
debug=
lang=en
profile=default
odd=false
verbose=false
summaryDoc=""
antflag="-q -Djava.awt.headless=true"
TEISOURCE=
TEISOURCE_DEFAULT=https://www.tei-c.org/Vault/P5/current/xml/tei/odd/p5subset.xml

# epub only
overlayfile=
splitLevel=
publisher=
coverimage=
cover=
cssFile=
conversion=
subject=
uid=
viewportwidth=
viewportheight=
medioverlay=
nocompress=
schema=
# ---
version=`cat "$APPHOME/VERSION"`
SAXONJAR=$APPHOME/lib/saxon9he.jar
TRANGJAR=$APPHOME/lib/trang.jar
from=`echo $script | sed 's/to.*//'`
to=`echo $script | sed 's/.*to//'`
if [ $to = "tei" ]
then
   direction=from
   format=$from
   outsuffix=.xml
else
   direction=to
   format=$to
   outsuffix=.$to
fi


while test $# -gt 0; do
  case $1 in
    --coverimage=*) cover=`echo $1 | sed 's/.*=//'`;;
    --css=*)        cssFile=-DcssFile=`echo $1 | sed 's/.*=//'`;;
    --fileperpage)  splitLevel="-DsplitLevel=-1"; fileperpage="-DfilePerPage=true";;
    --odd)          odd=true;;
    --lang=*)    lang=`echo $1 | sed 's/.*=//'`;;
    --localsource=*)   TEISOURCE="`echo $1 | sed 's/.*=//'`";;
    --schema=*)   schema="`echo $1 | sed 's/.*=//'`";;
    --mediaoverlay) mediaoverlay="-Dmediaoverlay=true";;
       --profile=*)    profile=`echo $1 | sed 's/.*=//'`;;
     --oxygenlib=*)  oxygenlib=`echo $1 | sed 's/.*=//'`;;
    --profiledir=*) profiledir=`echo $1 | sed 's/.*=//'`;;
       --apphome=*)  APPHOME=`echo $1 | sed 's/.*=//'`;;
     --publisher=*)  publisher=`echo $1 | sed 's/.*=//'`;;
      --saxonjar=*)   SAXONJAR=`echo $1 | sed 's/.*=//'`;;
      --trangjar=*)   TRANGJAR=`echo $1 | sed 's/.*=//'`;;
    --splitLevel=*) splitLevel="-DsplitLevel=`echo $1 | sed 's/.*=//'`";;
       --subject=*)    subject="`echo $1 | sed 's/.*=//'`";;
           --uid=*)        uid=`echo $1 | sed 's/.*=//'`;;
    --debug)        debug="-Ddebug=true"; verbose=true; antflag=-v;;
    --verbose)      verbose=true;;
    --summaryDoc)      summaryDoc="-DsummaryDoc=true";;
    --viewportwidth=*)   viewportwidth="-DviewPortWidth=`echo $1 | sed 's/.*=//'`";;
    --viewportheight=*)   viewportheight="-DviewPortHeight=`echo $1 | sed 's/.*=//'`";;
    --nocompress)	nocompress="-DnoCompress=true";;
    --help)         usageMsg; exit 1;;
     *) if test "$1" = "${1#--}" ; then 
	   break
	else
	   echo "WARNING: Unrecognized option '$1' ignored"
	fi ;;
  esac
  shift
done

if [ $# -gt 2 ]
then
    echo Error: only two parameters \(input file and output file\) allowed: $*
    exit 1
fi

if test "$defaultAPPHOME" != "$APPHOME"
then
    if test "$profiledir" = "$defaultprofiledir"
    then
	profiledir=$APPHOME/profiles
    fi
fi

# **************************************** #
# *** work out defaultSource parameter *** # 
# ***  to pass to the XSL Stylesheets  *** #
# **************************************** #  
# case 1: no localsource set, we'll use the hard-coded values 
# for the source as set in the XSL Stylesheets
if test "x$TEISOURCE" = "x"
then
  defaultSource="\"$TEISOURCE_DEFAULT\""
  echo "WARNING: No localsource set. Will get a copy from $TEISOURCE_DEFAULT if necessary."

# case 2: localsource is set and starts with 'http',
# thus pointing at a remote resource
elif [ "$TEISOURCE" != "${TEISOURCE#http}" ]
then
  echo "using remote resource $TEISOURCE as default source" 
  defaultSource="\"$TEISOURCE\""

# case 3: localsource is set and the local file exists
elif test -e $TEISOURCE
then
  REALD=`dirname "$TEISOURCE"`
  SDIR=`(cd $REALD; pwd)`
  REALSOURCE=$SDIR/`basename $TEISOURCE`
  echo "using local file $REALSOURCE as default source"
  defaultSource="\"$REALSOURCE\""
# last case: exit with error
else 
  die "unable to get localsource from $TEISOURCE"
fi

in=${1:?"no input file supplied; for usage syntax $0 --help"}
infile=`basename "$in"`
D=`dirname "$in"`
indir=`(cd $D; pwd)`
if [ $# -eq 1 ]
then
   outfile=`basename "$1" .$from`$outsuffix
   outdir=$indir
else
   outfile=`basename $2`
   O=`dirname "$2"`
   outdir=`(mkdir -p $O; cd $O; pwd)`
fi
if ! test -f "$indir/$infile"
then 
    die "Input file $infile does not exist"
fi
if ! test -f "$SAXONJAR"
then 
    die "Saxon jar file $SAXONJAR does not exist"
fi
if ! test -f "$APPHOME/$format/build-$direction.xml"
then
    die "No support for $from to $to: ant task $APPHOME/$format/build-$direction.xml does not exist"
fi
case $format in
      rnc) ;;
      xsd) ;;
      *) if ! test -f "$profiledir/$profile/$format/$direction.xsl"
	  then
	  die "No support for profile $profile: $profiledir/$profile/$format/$direction.xsl does not exist"
	 fi
	  ;;
esac

echo Convert $infile to $outdir/$outfile \($from to $to\) using profile $profile $debug $fileperpage $splitLevel $viewportwidth $viewportheight 
ant $antflag -f "$APPHOME/$format/build-$direction.xml" \
	-lib "${SAXONJAR}" $debug \
    $fileperpage $cssFile $splitLevel $viewportwidth $viewportheight $summaryDoc $mediaoverlay $nocompress \
        -Dodd=$odd \
        -Dsaxon.jar="${SAXONJAR}" \
        -Dtrang.jar="${TRANGJAR}" \
        -Dverbose=$verbose \
	-DinputFile="$indir/$infile" \
	-DoutputFile="$outdir/$outfile" \
        -Dprofiledir="$profiledir" \
        -Dprofile="$profile" \
	-Dpublisher=$publisher \
	-Duid=$uid \
        -DselectedSchema=$schema \
	-Dlang=$lang \
	-Dsubject=$subject \
	-Dcoverimage=$cover \
	-Doxygenlib=$oxygenlib \
	-DdefaultSource=$defaultSource

	
