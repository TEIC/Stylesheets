<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="docx" name="StylesheetsTestDocx"
  xmlns:if="ant:if"
  xmlns:unless="ant:unless">
  
  <description> 
    Stylesheets/Test2/build_docx.xml
    
    ANT TEST FILE FOR CONVERSIONS BETWEEN TEI AND DOCX.
    
    
    
  </description>


  <!-- First we include the generic utilities module.   -->
  <import file="build_utilities.xml" as="utils"/>
  
  <!--  Files for conversion to ODT.  -->
  <fileset id="teiToDocxFiles" dir="${inputDir}" includes="generalP5.xml, testEgXml1.xml, testNotes1.xml"/>
  
  <!--  Files for conversion from ODT.  -->
  <!--  NOTE: docxGeneral.docx NOT INCLUDED HERE FOR NOW BECAUSE THE RESULTS ARE INVALID.
        See https://github.com/TEIC/Stylesheets/issues/262. -->
  <fileset id="teiFromDocxFiles" dir="${inputDir}" includes="testDocxIndexes1.docx, testShelfmarkMs.docx,
                                                             testDocxListsTables1.docx, testNotes2.docx,
                                                             "/>
  
  
<!-- Default target that does everything. -->
  <target name="docx">
    <antcall target="teiFilesToDocx"/>
    <antcall target="teiFilesFromDocx"/>
  </target>
  
  <target name="teiFilesToDocx">
    <description>
      TARGET teiFilesToDocx
      Converts TEI files to docx, extracts their document.xml
      and core.xml, and diffs them against expected results.
    </description>
   
    <foreach target="teiFileToDocx" param="inFile">
      <path>
        <fileset refid="teiToDocxFiles"/>
      </path>
    </foreach>
    
  </target>
  
  <target name="teiFileToDocx">
    <description>
      TARGET teiFileToDocx
      Converts a single TEI file to docx, then extracts the document.xml
      and core.xml files from the result and diffs them against expected 
      results. It takes a single parameter, inFile.
    </description>
    <basename file="${inFile}" property="plainFileName" suffix=".xml"/>
    <property name="outFile" value="${outputDir}/${plainFileName}.docx"/>
    
<!-- NOTE: ultimately we want to do this conversion by calling ant directly on the 
    ../odt/build-to.xml file, but it seems impossible to make this work; ant cannot
    find the main Saxon class. -->
    <exec executable="${bin}/teitodocx" failonerror="true">
      <arg line="--localsource=${localsource}"/>
      <arg file="${inFile}"/>
      <arg file="${outFile}"/>
    </exec>
    
<!-- Make a temp dir and unzip the ODT file.        -->
    <mkdir dir="${outputDir}/temp"/>
    <unzip src="${outFile}" dest="${outputDir}/temp/${plainFileName}"/>
    <copy file="${outputDir}/temp/${plainFileName}/word/document.xml" tofile="${outputDir}/temp/${plainFileName}/${plainFileName}DocxDocument.xml"/>
    <copy file="${outputDir}/temp/${plainFileName}/docProps/core.xml" tofile="${outputDir}/temp/${plainFileName}/${plainFileName}DocxCore.xml"/>
    
    
    <antcall target="prepAndDiffFile">
      <param name="inFile" value="${outputDir}/temp/${plainFileName}/${plainFileName}DocxDocument.xml"/>
    </antcall>
    <antcall target="prepAndDiffFile">
      <param name="inFile" value="${outputDir}/temp/${plainFileName}/${plainFileName}DocxCore.xml"/>
    </antcall>
  </target>

  <target name="teiFilesFromDocx">
    <description>
      TARGET teiFilesFromDocx
      Converts DOCX files to TEI, validates them, 
      and diffs them against expected results.
    </description>
    
    <foreach target="teiFileFromDocx" param="inFile">
      <path>
        <fileset refid="teiFromDocxFiles"/>
      </path>
    </foreach>
   
  </target>
  
    
  <target name="teiFileFromDocx" depends="getLatestTeiAll">
    <description>
      TARGET teiFileFromDocx
      Converts a single DOCX file to TEI, validates the result with Jing,
      then diffs it against expected results. It takes a single
      parameter, inFile.
    </description>
    <basename file="${inFile}" property="plainFileName" suffix=".docx"/>
    <property name="outFile" value="${outputDir}/${plainFileName}.xml"/>
    
    <!-- NOTE: ultimately we want to do this conversion by calling ant directly on the 
    ../odt/build-from.xml file, but it seems impossible to make this work; ant cannot
    find the main Saxon class. -->
    <exec executable="${bin}/docxtotei" failonerror="true">
      <arg line="--localsource=${localsource}"/>
      <arg file="${inFile}"/>
      <arg file="${outFile}"/>
    </exec>
    
<!-- Validate the results.   -->
    <jing rngfile="${teiAllSchema}" file="${outFile}"/>
    
    <antcall target="prepAndDiffFile">
      <param name="inFile" value="${outFile}"/>
    </antcall>
  </target>
  
  
</project>